expression(paste("N~(", mu, "= 0.0, ", omega, "= 0.2)")), col = "#3E283D")
# P-value line
abline(v=cor(indegree, grade), lwd=2, col="#7C5079")
text(x = cor(indegree, grade)+0.1, y = cor(indegree, grade),
expression(paste(rho, ": 0.85")), col = "#7C5079")
# Total degree centralisation
sna::centralization(net,sna::degree)
formattable(data.frame(cbind(
# In degree centralisation
"In degree Centralisation Index" = sna::centralization(net,sna::degree, cmode="indegree"),
# Out degree centralisation
"Out degree Centralisation Index" = sna::centralization(net,sna::degree, cmode="outdegree"))))
formattable(data.frame(
# In degree centralisation
"In degree Centralisation Index" = sna::centralization(net,sna::degree, cmode="indegree"),
# Out degree centralisation
"Out degree Centralisation Index" = sna::centralization(net,sna::degree, cmode="outdegree")))
formattable(data.frame(
"Centralization index" = sna::centralization(net,sna::degree),
# In degree centralization
"In degree Centralization Index" = sna::centralization(net,sna::degree, cmode="indegree"),
# Out degree centralization
"Out degree Centralization Index" = sna::centralization(net,sna::degree, cmode="outdegree")))
data.frame(
"Centralization index" = sna::centralization(net,sna::degree),
# In degree centralization
"In degree Centralization Index" = sna::centralization(net,sna::degree, cmode="indegree"),
# Out degree centralization
"Out degree Centralization Index" = sna::centralization(net,sna::degree, cmode="outdegree"))
table = formattable(data.frame(
"Centralization index" = sna::centralization(net,sna::degree),
# In degree centralization
"In degree Centralization Index" = sna::centralization(net,sna::degree, cmode="indegree"),
# Out degree centralization
"Out degree Centralization Index" = sna::centralization(net,sna::degree, cmode="outdegree")))
names(table)
table = formattable(data.frame(
"Centralization index" = sna::centralization(net,sna::degree),
# In degree centralization
"In degree Centralization Index" = sna::centralization(net,sna::degree, cmode="indegree"),
# Out degree centralization
"Out degree Centralization Index" = sna::centralization(net,sna::degree, cmode="outdegree")))
names(table) = c("Centralization index", "In degree Centralization Index", "Out degree Centralization Index")
table
## Betweenness centrality normalized
betweenness = sna::betweenness(net, gmode="digraph")/(25*24/2)
## Bonacich Power Centrality
bonpow = sna::bonpow(net, gmode="digraph", exponent=0)
## Constraint index
library(igraph)
i_net<-graph_from_adjacency_matrix(as.matrix(read.csv("bullying_network.csv",
row.names = 1,
stringsAsFactors = F)),
mode="directed", diag=F)
con_ind = constraint(i_net)
as.datatable(formattable(data.frame(cbind(betweenness,
bonpow,
con_ind)),
'betweenness' = color_bar("lightpink"),
align = c("l",rep("c",3))))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("lightpink")),
align = c("l",rep("c",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("lightpink"),
"Bonacich Power Centrality" = color_bar("lightgreen"),
"Constraint Index" = color_bar("lightblue")),
align = c("l",rep("c",3)))
## Betweenness centrality normalized
betweenness = round(sna::betweenness(net, gmode="digraph")/(25*24/2),3)
## Bonacich Power Centrality
bonpow = round(sna::bonpow(net, gmode="digraph", exponent=0),3)
## Constraint index
library(igraph)
i_net<-graph_from_adjacency_matrix(as.matrix(read.csv("bullying_network.csv",
row.names = 1,
stringsAsFactors = F)),
mode="directed", diag=F)
con_ind = round(constraint(i_net),3)
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("lightpink"),
"Bonacich Power Centrality" = color_bar("lightgreen"),
"Constraint Index" = color_bar("lightblue")),
align = c("l",rep("c",3)))
betweenness
con_ind
bonpow
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("lightpink"),
"Bonacich Power Centrality" = color_bar("lightgreen"),
"Constraint Index" = color_bar("lightblue")),
align = c("l",rep("c",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("lightpink"),
"Bonacich.Power.Centrality" = color_bar("lightgreen"),
"Constraint.Index" = color_bar("lightblue")),
align = c("l",rep("c",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("lightpink"),
"Bonacich.Power.Centrality" = color_bar("lightgreen"),
"Constraint.Index" = color_bar("lightblue")),
align = c(rep("c",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("lightpink"),
"Bonacich.Power.Centrality" = color_bar("lightgreen"),
"Constraint.Index" = color_bar("lightblue")),
align = c(rep("l",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("lightpink"),
"Bonacich.Power.Centrality" = color_bar("lightgreen"),
"Constraint.Index" = color_tile("trasparent","lightblue")),
align = c(rep("l",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("lightpink"),
"Bonacich.Power.Centrality" = color_bar("lightgreen"),
"Constraint.Index" = color_tile("transparent","lightblue")),
align = c(rep("l",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#3E5C76"),
"Bonacich.Power.Centrality" = color_bar("#1FAD9D"),
"Constraint.Index" = color_tile("transparent","#54B690")),
align = c(rep("l",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#1FAD9D"),
"Constraint.Index" = color_tile("transparent","#3E5C76")),
align = c(rep("l",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#3E5C76"),
"Constraint.Index" = color_tile("transparent","#1FAD9D")),
align = c(rep("l",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#758BFD"),
"Constraint.Index" = color_tile("transparent","#1FAD9D")),
align = c(rep("l",3)))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#758BFD"),
"Constraint.Index" = color_tile("transparent","#1FAD9D")),
align = c("r","r","c"))
con_ind
bonpow
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#758BFD"),
"Constraint.Index" = color_tile("#1FAD9D", "yellow", "orange", "red")),
align = c("r","r","c"))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#758BFD"),
"Constraint.Index" = color_tile("#1FAD9D", "yellow", "orange", "red")),
align = c("r","r","c"))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#758BFD"),
"Constraint.Index" = color_tile("#1FAD9D", "yellow")),
align = c("r","r","c"))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#758BFD"),
"Constraint.Index" = color_tile("#1FAD9D", "red")),
align = c("r","r","c"))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#9BABFD"),
"Constraint.Index" = color_tile("#1FAD9D", "red")),
align = c("r","r","c"))
## Bonacich Power Centrality
bonpow = round(sna::bonpow(net, gmode="digraph", exponent=0)/
sum(sna::bonpow(net, gmode="digraph", exponent=0)),3)
## Betweenness centrality normalized
betweenness = round(sna::betweenness(net, gmode="digraph")/(25*24/2),3)
## Bonacich Power Centrality
bonpow = round(sna::bonpow(net, gmode="digraph", exponent=0)/
sum(sna::bonpow(net, gmode="digraph", exponent=0)),3)
## Constraint index
library(igraph)
i_net<-graph_from_adjacency_matrix(as.matrix(read.csv("bullying_network.csv",
row.names = 1,
stringsAsFactors = F)),
mode="directed", diag=F)
con_ind = round(constraint(i_net),3)
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#9BABFD"),
"Constraint.Index" = color_tile("#1FAD9D", "red")),
align = c("r","r","c"))
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#9BABFD"),
"Constraint.Index" = color_tile("#1FAD9D", "red")),
align = c("r","r","c")))
sna::dyad.census(net)
library(tidyverse)
library(sna)
library(itsadug) # For gradient legend
library(knitr)
library(formattable)
# Importing data
net = as.matrix(read.csv("bullying_network.csv",
stringsAsFactors=FALSE, row.names=1))
# Converting the adjacency matrix to a network
net = as.network(net, directed=T)
# Inspect the network
summary(net, print.adj = FALSE)
# Reading the csv file with node attributes
attr = read.csv("bullying_attributes.csv")
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
mode="fruchtermanreingold", # set mode as Fruchterman-Reingold
jitter=F,           # do not allow nodes to be "jittered"
edge.col="grey70",  # set color of ties
vertex.col="cornflowerblue",   # set color of nodes
vertex.sides = 100,
displaylabels=T,    # indicate that labels should be included
label.pos=1,        # indicate that labels should be given below points
label.cex=.7,       # indicate the size of the labels (1 is default)
arrowhead.cex = 0.4,
object.scale = 0.01)
colours_1 = c("#2a9d8f", "#e9c46a", "#e76f51")
sizes = seq(0.1, 4, length.out=11)
par(mar=c(0,0,0,0))
gplot(net,
gmode="digraph",    # directed network
jitter=T,
edge.col="grey70",  # set color of ties
vertex.col=colours_1[attr$Ethnicity], # set color of nodes depending on ethnicity
vertex.cex = sizes[attr$Grade], # set size of nodes depending on grade
vertex.sides= (attr$Gender-1)*47+4, # set shape of nodes depending on gender
vertex.rot = 45, # Nodes rotation
arrowhead.cex = 0.5) # Size of the arrows head
sizes = seq(0.2, 3, length.out=11)
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
jitter=T,
edge.col="grey70",  # set color of ties
vertex.col=colours_1[attr$Ethnicity],   # set color of nodes depending on ethnicity
vertex.cex = sizes[attr$Grade], # set size of nodes depending on grade
vertex.sides= (attr$Gender-1)*47+4, # set shape of nodes depending on gender
vertex.rot = 45,
arrowhead.cex = 0.5,
displaylabels=T,    # indicate that labels should be included
label.pos=1,        # indicate that labels should be given below points
label.cex=.7)       # indicate the size of the labels (1 is default)
legend("topleft",
legend = c("Ethnicity"," 1st gen immigrants", " 2st gen immigrants", " Italian",
" ", "Gender", " Male", " Female",
" ", "Grade", 0:10),
col = c("white",colours_1[1],colours_1[2],colours_1[3],
"white","white","black","black",
"white", "white", rep("black",11)),
bty = "n",
pch =c(15,15,15,15,
15,15,19,15,
15,15,rep(19,11)),
pt.cex = c(0,2.1,2.1, 2.1,
0,0,2.1,2.1,
0, 0, (0:10)/5),
cex = 1,
text.col = "grey10",
horiz = F ,
inset = c(0.01))
colours_2 = c('#fff0f3', '#ffccd5', '#ffb3c1', '#ff8fa3', '#ff758f',
'#ff4d6d', '#c9184a', '#a4133c', '#800f2f', '#590d22',
"#d8f3dc","#b7e4c7","#95d5b2","#74c69d","#52b788",
"#40916c", "#2d6a4f","#245741","#1b4332","#081c15"
)
shapes = c(3,4,50)
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
jitter=F,           # do not allow nodes to be "jittered"
edge.col="grey70",  # set color of ties
vertex.col=colours_2[attr$Gender*10+attr$Grade+1],   # set color of nodes
vertex.cex = 1.3,
vertex.rot = 45,
vertex.sides= shapes[attr$Ethnicity],
arrowhead.cex = 0.5)
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
jitter=T,           # do not allow nodes to be "jittered"
edge.col="grey70",  # set color of ties
vertex.col=colours_2[attr$Gender*10+attr$Grade+1],   # set color of nodes
vertex.cex = 1,
vertex.rot = 45,
vertex.sides= shapes[attr$Ethnicity],
displaylabels=T,    # indicate that labels should be included
arrowhead.cex = 0.5,
label.pos=1,        # indicate that labels should be given below points
label.cex=.7)       # indicate the size of the labels (1 is default))
# Legend for gender and ethnicity
legend("topleft",
legend = c("Ethnicity"," 1st gen immigrants", " 2st gen immigrants", " Italian",
" ", "Gender", " Male", " Female",
" ", "Grade"),
col = c("white","black","black", "black",
"white","white","#52b788","#ff4d6d",
"white", "white"),
bty = "n",
pch =c(15,17,15,19,
15,15,15,15,
15, 15),
pt.cex = c(0,2.1,2.1, 2.2,
0,0,2.1,2.1,
0,0),
cex = 1,
text.col = "grey10",
horiz = F ,
inset = c(0.01))
# Gradient legend
pal = colorRampPalette(colours_2[1:10])
gradientLegend(valRange=c(0,10),
color = pal(10),
pos=c(0.05,0.1,.08,0.5),
side=4,
n.seg=1,
border.col = "grey10",
inside = T)
pal = colorRampPalette(colours_2[11:20])
gradientLegend(valRange=c(0,10),
color = pal(10),
pos=c(0.12,0.1,.15,0.5), side=4,
n.seg=1,
border.col = "grey10",
inside = T)
# How many people are you bullied from?
indegree = sna::degree(net, gmode="digraph", cmode = "indegree")
# How many people do you bully?
outdegree = sna::degree(net, gmode="digraph", cmode = "outdegree")
# Overall Degree
degree = sna::degree(net, gmode="digraph")
# Create dataframe with names, in and out-degree
names = net %v% "vertex.names"    # Get vertex names
people = data.frame(Name = names) # Create data frame with names column
people$`In degree` = indegree        # Insert in degree
people$`Out degree` = outdegree      # Insert out degree
people$Degree = degree            # Insert total degree
# Normalized indegree
nodes = length(net$val) - 1
people$`Normalized In degree` = round(people$`In degree`/nodes,2)
# Average and median in degree
avg_indegree = mean(people$`In degree`)
median_indegree = median(people$`In degree`)
people$`Above Average` =  ifelse(indegree<=avg_indegree, "No", "Yes")
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", "#B78FB3"),
'Out degree' = color_tile("transparent", "#1FAD9D"),
'Degree' = color_tile("transparent", "#1FAD9D"),
'Normalized In degree' = color_tile("transparent", "#B78FB3"),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", "#1FAD9D", "#B78FB3")))))
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", "#B78FB3"),
'Out degree' = color_tile("transparent", "#1FAD9D"),
'Degree' = color_tile("transparent", "#1FAD9D"),
'Normalized In degree' = color_tile("transparent", "#B78FB3"),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", "#1FAD9D", "#B78FB3")))))
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", "#B78FB3"),
'Out degree' = color_tile("transparent", "#1FAD9D"),
'Degree' = color_tile("transparent", "#1FAD9D"),
'Normalized In degree' = color_tile("transparent", "#B78FB3"),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", "#1FAD9D", "#B78FB3")))))
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", "#B78FB3"),
'Out degree' = color_tile("transparent", "#1FAD9D"),
'Degree' = color_tile("transparent", "#1FAD9D"),
'Normalized In degree' = color_tile("transparent", "#B78FB3"),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", "#1FAD9D", "#B78FB3")))))
# Create dataframe with names, in and out-degree
names = net %v% "vertex.names"    # Get vertex names
people = data.frame(Name = names) # Create data frame with names column
people$`In degree` = indegree        # Insert in degree
people$`Out degree` = outdegree      # Insert out degree
people$Degree = degree            # Insert total degree
# Normalized indegree
nodes = length(net$val) - 1
people$`Normalized In degree` = round(people$`In degree`/nodes,2)
# Average and median in degree
avg_indegree = mean(people$`In degree`)
median_indegree = median(people$`In degree`)
people$`Above Average` =  ifelse(indegree<=avg_indegree, "No", "Yes")
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", "#B78FB3"),
'Out degree' = color_tile("transparent", "#1FAD9D"),
'Degree' = color_tile("transparent", "#1FAD9D"),
'Normalized In degree' = color_tile("transparent", "#B78FB3"),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", "#1FAD9D", "#B78FB3")))))
people %>%
arrange(desc(indegree))
formattable(people,align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", "#B78FB3"),
'Out degree' = color_tile("transparent", "#1FAD9D"),
'Degree' = color_tile("transparent", "#1FAD9D"),
'Normalized In degree' = color_tile("transparent", "#B78FB3"),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", "#1FAD9D", "#B78FB3")))))
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", "#B78FB3"),
'Out degree' = color_tile("transparent", "#1FAD9D"),
'Degree' = color_tile("transparent", "#1FAD9D"),
'Normalized In degree' = color_tile("transparent", "#B78FB3")))
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", "#B78FB3"),
'Out degree' = color_tile("transparent", "#1FAD9D"),
'Degree' = color_tile("transparent", "#1FAD9D"),
'Normalized In degree' = color_tile("transparent", "#B78FB3"),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", "#1FAD9D", "#B78FB3")))))
gc()
