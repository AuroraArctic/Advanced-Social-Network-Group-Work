label.cex=.7,       # indicate the size of the labels (1 is default)
arrowhead.cex = 0.4,
object.scale = 0.01)
colours_1 = c("#2a9d8f", "#e9c46a", "#e76f51")
sizes = seq(0.1, 4, length.out=11)
par(mar=c(0,0,0,0))
gplot(net,
gmode="digraph",    # directed network
jitter=T,
edge.col="grey70",  # set color of ties
vertex.col=colours_1[attr$Ethnicity], # set color of nodes depending on ethnicity
vertex.cex = sizes[attr$Grade], # set size of nodes depending on grade
vertex.sides= (attr$Gender-1)*47+4, # set shape of nodes depending on gender
vertex.rot = 45, # Nodes rotation
arrowhead.cex = 0.5) # Size of the arrows head
sizes = seq(0.2, 3, length.out=11)
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
jitter=T,
edge.col="grey70",  # set color of ties
vertex.col=colours_1[attr$Ethnicity],   # set color of nodes depending on ethnicity
vertex.cex = sizes[attr$Grade], # set size of nodes depending on grade
vertex.sides= (attr$Gender-1)*47+4, # set shape of nodes depending on gender
vertex.rot = 45,
arrowhead.cex = 0.5,
displaylabels=T,    # indicate that labels should be included
label.pos=1,        # indicate that labels should be given below points
label.cex=.7)       # indicate the size of the labels (1 is default)
legend("topleft",
legend = c("Ethnicity"," 1st gen immigrants", " 2st gen immigrants", " Italian",
" ", "Gender", " Male", " Female",
" ", "Grade", 0:10),
col = c("white",colours_1[1],colours_1[2],colours_1[3],
"white","white","black","black",
"white", "white", rep("black",11)),
bty = "n",
pch =c(15,15,15,15,
15,15,19,15,
15,15,rep(19,11)),
pt.cex = c(0,2.1,2.1, 2.1,
0,0,2.1,2.1,
0, 0, (0:10)/5),
cex = 1,
text.col = "grey10",
horiz = F ,
inset = c(0.01))
colours_2 = c('#fff0f3', '#ffccd5', '#ffb3c1', '#ff8fa3', '#ff758f',
'#ff4d6d', '#c9184a', '#a4133c', '#800f2f', '#590d22',
"#d8f3dc","#b7e4c7","#95d5b2","#74c69d","#52b788",
"#40916c", "#2d6a4f","#245741","#1b4332","#081c15"
)
shapes = c(3,4,50)
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
jitter=F,           # do not allow nodes to be "jittered"
edge.col="grey70",  # set color of ties
vertex.col=colours_2[attr$Gender*10+attr$Grade+1],   # set color of nodes
vertex.cex = 1.3,
vertex.rot = 45,
vertex.sides= shapes[attr$Ethnicity],
arrowhead.cex = 0.5)
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
jitter=T,           # do not allow nodes to be "jittered"
edge.col="grey70",  # set color of ties
vertex.col=colours_2[attr$Gender*10+attr$Grade+1],   # set color of nodes
vertex.cex = 1,
vertex.rot = 45,
vertex.sides= shapes[attr$Ethnicity],
displaylabels=T,    # indicate that labels should be included
arrowhead.cex = 0.5,
label.pos=1,        # indicate that labels should be given below points
label.cex=.7)       # indicate the size of the labels (1 is default))
# Legend for gender and ethnicity
legend("topleft",
legend = c("Ethnicity"," 1st gen immigrants", " 2st gen immigrants", " Italian",
" ", "Gender", " Male", " Female",
" ", "Grade"),
col = c("white","black","black", "black",
"white","white","#52b788","#ff4d6d",
"white", "white"),
bty = "n",
pch =c(15,17,15,19,
15,15,15,15,
15, 15),
pt.cex = c(0,2.1,2.1, 2.2,
0,0,2.1,2.1,
0,0),
cex = 1,
text.col = "grey10",
horiz = F ,
inset = c(0.01))
# Gradient legend
pal = colorRampPalette(colours_2[1:10])
gradientLegend(valRange=c(0,10),
color = pal(10),
pos=c(0.05,0.1,.08,0.5),
side=4,
n.seg=1,
border.col = "grey10",
inside = T)
pal = colorRampPalette(colours_2[11:20])
gradientLegend(valRange=c(0,10),
color = pal(10),
pos=c(0.12,0.1,.15,0.5), side=4,
n.seg=1,
border.col = "grey10",
inside = T)
# How many people are you bullied from?
indegree = sna::degree(net, gmode="digraph", cmode = "indegree")
# How many people do you bully?
outdegree = sna::degree(net, gmode="digraph", cmode = "outdegree")
# Overall Degree
degree = sna::degree(net, gmode="digraph")
# Create dataframe with names, in and out-degree
names = net %v% "vertex.names"    # Get vertex names
people = data.frame(Name = names) # Create data frame with names column
people$`In degree` = indegree        # Insert in degree
people$`Out degree` = outdegree      # Insert out degree
people$Degree = degree            # Insert total degree
# Normalized indegree
nodes = length(net$val) - 1
people$`Normalized In degree` = round(people$`In degree`/nodes,2)
# Average and median in degree
avg_indegree = mean(people$`In degree`)
median_indegree = median(people$`In degree`)
people$`Above Average` =  ifelse(indegree<=avg_indegree, "No", "Yes")
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", "#B78FB3"),
'Out degree' = color_tile("transparent", "#1FAD9D"),
'Degree' = color_tile("transparent", "#1FAD9D"),
'Normalized In degree' = color_tile("transparent", "#B78FB3"),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", "#1FAD9D", "#B78FB3")))))
results = data.frame(Measures = c("Most central node",
"Max in degree",
"(Theoretical) max in degree",
"Least central nodes",
"Min in degree",
"(Theoretical) min in degree",
"Average in degree",
"Median in degree"))
results$Value = c(people[which.max(people$`In degree`),]$Name,
max(people$`In degree`),
nodes,
paste0(c(people[which(people$`In degree` == min(people$`In degree`)),]$Name), collapse=", "),
min(people$`In degree`),
0,
avg_indegree,
median_indegree)
formattable(results,
align = c("l","l"))
# In-degree distribution among nodes
ggplot(people)+
geom_histogram(aes(x=indegree), stat="count", fill="#B78FB3")+
labs(title = "Distribution of in degree")+
xlab("In degree centrality")+ylab("Number of students")+
theme_minimal()
######################
# IMPROVE PLOT
######################
par(mar=c(0,0,0,0)) # Margin deletion
sna::gplot(net,
gmode="digraph",    # directed network
jitter=F,
mode = "fruchtermanreingold",
edge.col="grey70",  # set color of ties
vertex.col=colours_1[attr$Ethnicity],   # set color of nodes
vertex.cex = log(indegree)+0.2,
vertex.sides= (attr$Gender-1)*47+4,
displaylabels=T,    # indicate that labels should be included
label.pos=1,        # indicate that labels should be given below points
label.cex=.7)       # indicate the size of the labels (1 is default)
legend("topright",
legend = c("Ethnicity"," 1st gen immigrants", " 2st gen immigrants", " Italian",
" ", "Gender", " Male", " Female"),
col = c("white",colours_1[1],colours_1[2],colours_1[3],
"white","white","black","black"),
bty = "n",
pch =c(15,15,15,15,15,15,19,18),
pt.cex = c(0,2.1,2.1, 2.1,
0,0,2.1,2.1),
cex = 1,
text.col = "grey10",
horiz = F ,
inset = c(0.01))
# Normalized outdegree
people$`Normalized Out degree` = round(people$`Out degree`/nodes, 3)
# Average and median out degree
avg_outdegree = mean(people$`Out degree`)
median_outdegree = median(sort(people$`Out degree`))
people$`Above Average` =  ifelse(outdegree<=avg_outdegree, "No", "Yes")
people %>%
select(Name, `Out degree`,`In degree`,
Degree, `Normalized Out degree`, `Above Average`) %>%
arrange(desc(outdegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", "#1FAD9D"),
'Out degree' = color_tile("transparent", "#B78FB3"),
'Degree' = color_tile("transparent", "#1FAD9D"),
'Normalized Out degree' = color_tile("transparent", "#B78FB3"),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", "#1FAD9D", "#B78FB3")))))
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
jitter=F,
edge.col="grey70",  # set color of ties
vertex.col= ifelse(outdegree == max(outdegree) , "salmon", "lightblue"),
vertex.cex = sizes[outdegree]+0.5,
displaylabels=T,    # indicate that labels should be included
label.pos=1,        # indicate that labels should be given below points
label.cex=.7)       # indicate the size of the labels (1 is default)
results = data.frame(Measures = c("Most central node",
"Max out degree",
"(Theoretical) max out degree",
"Least central nodes",
"Min out degree",
"(Theoretical) min out degree",
"Average out degree",
"Median out degree"))
results$Value = c(paste0(c(people[which(people$`Out degree` == max(people$`Out degree`)),]$Name), collapse=", "),
max(people$`Out degree`),
nodes,
paste0(c(people[which(people$`Out degree` == min(people$`Out degree`)),]$Name), collapse=", "),
min(people$`Out degree`),
0,
avg_outdegree,
median_outdegree)
formattable(results,
align = c("l","l"))
ggplot(people)+
geom_bar(aes(x=reorder(`Name`,`Out degree`),y=`Out degree`),
stat='identity',
fill="#B78FB3")+
geom_hline(yintercept=3.04, linetype="dashed", color = "#1FAD9D", size=1.5)+
theme_minimal()+
theme(axis.text.x = element_text(angle =45, hjust=1))+
xlab("Students")+
annotate(geom="text", x=4, y=3.5, label="Avg out-degree = 3.04",color="#1FAD9D")+
labs(title = "Distribution of Out degree Values")
grade = attr$Grade
cor_value = cor(indegree, grade, method = c("pearson"))
cor_value
cor.test(indegree,grade)
# Linear relationship between in degree and grade
ggplot(people,aes(x = indegree, y = grade))+
stat_smooth(method = "lm", color = "#1FAD9D", fill = "#A8F0E9")+
geom_point(size = 2.5, color = "#1FAD9D")+
theme_minimal()+
theme(axis.text.x = element_text(angle =45, hjust=1))+
labs(title = "Linear relationship between in degree and grade")
########################
# Significance test also on ethnicity and gender
########################
attr$indegree = indegree
attr$outdegree = outdegree
# GENDER SIGNIFICANCE TEST
# Mean difference between males and females (in degree)
t.test(filter(attr,Gender==0)$indegree,
filter(attr,Gender==1)$indegree)
# Mean difference between males and females (out degree)
t.test(filter(attr,Gender==0)$outdegree,
filter(attr,Gender==1)$outdegree)
# Mean difference between males and females (in degree)
var.test(filter(attr,Gender==0)$indegree,
filter(attr,Gender==1)$indegree)
# Mean difference between males and females (out degree)
var.test(filter(attr,Gender==0)$outdegree,
filter(attr,Gender==1)$outdegree)
set.seed(21)
permutation = matrix(NA,1000,1)
for (k in c(1:1000))
{
grade_perm = sample(grade)
permutation[k,1] = cor(indegree, grade_perm)
}
# Histogram
hist(permutation, prob=TRUE,
xlim=c(-1.0,1.0), ylim = c(0.0, 2.0),
xlab = "Value of permutation", col = "#C7A8C5")
x <- seq(min(permutation), max(permutation))
# Gaussian curve
curve(dnorm(x, mean=mean(permutation), sd=sd(permutation)),
col="#7C5079", lwd=2, add=TRUE)
text(x = 0.56, y = cor(indegree, grade),
expression(paste("N~(", mu, "= 0.0, ", omega, "= 0.2)")), col = "#3E283D")
# P-value line
abline(v=cor(indegree, grade), lwd=2, col="#7C5079")
text(x = cor(indegree, grade)+0.1, y = cor(indegree, grade),
expression(paste(rho, ": 0.85")), col = "#7C5079")
# Total degree centralisation
sna::centralization(net,sna::degree)
table = formattable(data.frame(
"Centralization index" = sna::centralization(net,sna::degree),
# In degree centralization
"In degree Centralization Index" = sna::centralization(net,sna::degree, cmode="indegree"),
# Out degree centralization
"Out degree Centralization Index" = sna::centralization(net,sna::degree, cmode="outdegree")))
names(table) = c("Centralization Index", "In degree Centralization Index", "Out degree Centralization Index")
table
## Betweenness centrality normalized
betweenness = round(sna::betweenness(net, gmode="digraph")/(25*24/2),3)
## Bonacich Power Centrality
bonpow = round(sna::bonpow(net, gmode="digraph", exponent=0)/
sum(sna::bonpow(net, gmode="digraph", exponent=0)),3)
## Constraint index
library(igraph)
i_net<-graph_from_adjacency_matrix(as.matrix(read.csv("bullying_network.csv",
row.names = 1,
stringsAsFactors = F)),
mode="directed", diag=F)
con_ind = round(constraint(i_net),3)
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C7A8C5"),
"Bonacich.Power.Centrality" = color_bar("#9BABFD"),
"Constraint.Index" = color_tile("#1FAD9D", "red")),
align = c("r","r","c")))
sna::dyad.census(net)
# Mutual edges
E(i_net)[which_mutual(i_net)]
# Degree Centrality of nodes with mutual links
people %>%
filter(Name %in% c("Francesco", "Andrea",
"Flavio", "Marco",
"Giulia", "Sara", "Angelo"))
sna::grecip(net, measure="edgewise")
sna::grecip(net, measure="dyadic")
sna::grecip(net, measure="dyadic.nonnull")
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#FCAA67"),
"Bonacich.Power.Centrality" = color_bar("#9BABFD"),
"Constraint.Index" = color_tile("#1FAD9D", "red")),
align = c("r","r","c")))
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#FCAA67"),
"Bonacich.Power.Centrality" = color_bar("#9BABFD"),
"Constraint.Index" = color_tile("#004643", "red")),
align = c("r","r","c")))
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#FCAA67"),
"Bonacich.Power.Centrality" = color_bar("#9BABFD"),
"Constraint.Index" = color_tile("#008F88", "red")),
align = c("r","r","c")))
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#FCAA67"),
"Bonacich.Power.Centrality" = color_bar("#9BABFD"),
"Constraint.Index" = color_tile("#008F88", "red")),
align = c("r","r","c")))
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#A63446"),
"Bonacich.Power.Centrality" = color_bar("#9BABFD"),
"Constraint.Index" = color_tile("#008F88", "red")),
align = c("r","r","c")))
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar("#C44558"),
"Bonacich.Power.Centrality" = color_bar("#9BABFD"),
"Constraint.Index" = color_tile("#008F88", "red")),
align = c("r","r","c")))
colors
colors = c("#C44558","#9BABFD","#008F88",red)
colors = c("#C44558","#9BABFD","#008F88","red")
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar(colors[1]),
"Bonacich.Power.Centrality" = color_bar(colors[2]),
"Constraint.Index" = color_tile(colors[3], colors[4])),
align = c("r","r","c")))
colors = c("#C44558","#9BABFD","#008F88","#C44558")
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar(colors[1]),
"Bonacich.Power.Centrality" = color_bar(colors[2]),
"Constraint.Index" = color_tile(colors[3], colors[4])),
align = c("r","r","c")))
colors = c("#C44558","#9BABFD","#008F88","red")
as.datatable(formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar(colors[1]),
"Bonacich.Power.Centrality" = color_bar(colors[2]),
"Constraint.Index" = color_tile(colors[3], colors[4])),
align = c("r","r","c")))
colors = c("#C44558","#9BABFD","#008F88","red")
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar(colors[1]),
"Bonacich.Power.Centrality" = color_bar(colors[2]),
"Constraint.Index" = color_tile(colors[3], colors[4])),
align = c("r","r","c"))
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", tile_colors[1]),
'Out degree' = color_tile("transparent",tile_colors[2]),
'Degree' = color_tile("transparent", tile_colors[2]),
'Normalized In degree' = color_tile("transparent", tile_colors[1]),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", tile_colors[1], tile_colors[2])))))
tile_colors = c("#B78FB3", # lilac
"#1FAD9D", # green
)
tile_colors = c("#B78FB5", # lilac
"#25D0BC", # green
"#71A2C1")
# Create dataframe with names, in and out-degree
names = net %v% "vertex.names"    # Get vertex names
people = data.frame(Name = names) # Create data frame with names column
people$`In degree` = indegree        # Insert in degree
people$`Out degree` = outdegree      # Insert out degree
people$Degree = degree            # Insert total degree
# Normalized indegree
nodes = length(net$val) - 1
people$`Normalized In degree` = round(people$`In degree`/nodes,2)
# Average and median in degree
avg_indegree = mean(people$`In degree`)
median_indegree = median(people$`In degree`)
people$`Above Average` =  ifelse(indegree<=avg_indegree, "No", "Yes")
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", tile_colors[1]),
'Out degree' = color_tile("transparent",tile_colors[2]),
'Degree' = color_tile("transparent", tile_colors[2]),
'Normalized In degree' = color_tile("transparent", tile_colors[1]),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", tile_colors[1], tile_colors[2])))))
# Normalized outdegree
people$`Normalized Out degree` = round(people$`Out degree`/nodes, 3)
# Average and median out degree
avg_outdegree = mean(people$`Out degree`)
median_outdegree = median(sort(people$`Out degree`))
people$`Above Average` =  ifelse(outdegree<=avg_outdegree, "No", "Yes")
people %>%
select(Name, `Out degree`,`In degree`,
Degree, `Normalized Out degree`, `Above Average`) %>%
arrange(desc(outdegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", tile_colors[1]),
'Out degree' = color_tile("transparent",  tile_colors[2]),
'Degree' = color_tile("transparent",  tile_colors[2]),
'Normalized Out degree' = color_tile("transparent",  tile_colors[1]),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes",  tile_colors[2],  tile_colors[1])))))
colors = c("#C44558","#9BABFD","#008F88","red")
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar(tile_colors[1]),
"Bonacich.Power.Centrality" = color_bar(tile_colors[2]),
"Constraint.Index" = color_tile("transparent", tile_colors[3])),
align = c("r","r","c"))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_bar(tile_colors[1]),
"Bonacich.Power.Centrality" = color_bar(tile_colors[2]),
"Constraint.Index" = color_tile("lightblue", tile_colors[3])),
align = c("r","r","c"))
formattable(data.frame(cbind("Betweenness" = betweenness,
"Bonacich Power Centrality" = bonpow,
"Constraint Index" = con_ind)),
list(
'Betweenness' = color_tile(tile_colors[1],tile_colors[2]),
"Bonacich.Power.Centrality" = color_tile(tile_colors[1],tile_colors[2]),
"Constraint.Index" = color_tile(tile_colors[1],tile_colors[2])),
align = c("r","r","c"))
