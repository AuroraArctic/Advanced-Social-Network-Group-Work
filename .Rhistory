mode="directed", diag=F)
# Setting colours, shapes, sizes, ethnicity, gender, title
V(i_net)$color = colours_1[attr$Ethnicity]
V(i_net)$shape = c("dot","square")[attr$Gender+1]
V(i_net)$size = attr$Grade*3
V(i_net)$ethnicity = ifelse(attr$Ethnicity==3, "Italian",
ifelse(attr$Ethnicity == 1,"1st immigrant", "2nd immigrant"))
V(i_net)$gender = ifelse(attr$Gender == 0, "Female","Male")
V(i_net)$title = paste0("<p><b>", attr$ID,"</b><br>",
V(i_net)$gender,", ",attr$Grade,", ",
V(i_net)$ethnicity,"</p>")
# Dataframe for the legend
lnodes <- data.frame(label = c("1st immigrants","2nd immigrants","Italians","Females", "Males"),
shape = c(rep("triangle",3),"dot","square"),
color = c(colours_1,"#B78FB5","#B78FB5"),
font.size = 10,
title = "Informations")
# Creation of the visNetwork object
new_net = toVisNetworkData(i_net)
# Actual visualization
visNetwork(nodes = new_net$nodes,
edges = new_net$edges,
height = "800px", width = "100%",
font.size = 9,
physics = T) %>%
visEdges(arrows = "to") %>%
visOptions(highlightNearest = TRUE,
selectedBy = "ethnicity") %>%
visIgraphLayout(layout = "layout.fruchterman.reingold") %>%
visLegend(addNodes = lnodes, useGroups = FALSE, ncol = 1)
# How many people are you bullied from?
indegree = sna::degree(net, gmode="digraph", cmode = "indegree")
# How many people do you bully?
outdegree = sna::degree(net, gmode="digraph", cmode = "outdegree")
# Overall Degree
degree = sna::degree(net, gmode="digraph")
attr$indegree = indegree
attr$outdegree = outdegree
tile_colors = c("#B78FB5", # lilac
"#25D0BC", # green
"#71A2C1")
# Create dataframe with names, in and out-degree
names = net %v% "vertex.names"    # Get vertex names
people = data.frame(Name = names) # Create data frame with names column
people$`In degree` = indegree        # Insert in degree
people$`Out degree` = outdegree      # Insert out degree
people$Degree = degree            # Insert total degree
# Normalized indegree
nodes = length(net$val) - 1
people$`Normalized In degree` = round(people$`In degree`/nodes,2)
# Average and median in degree
avg_indegree = mean(people$`In degree`)
median_indegree = median(people$`In degree`)
people$`Above Average (In degree)` =  ifelse(indegree<=avg_indegree, "No", "Yes")
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", tile_colors[1]),
'Out degree' = color_tile("transparent",tile_colors[2]),
'Degree' = color_tile("transparent", tile_colors[2]),
'Normalized In degree' = color_tile("transparent", tile_colors[1]),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", tile_colors[1], tile_colors[2])))))
results = data.frame(Measures = c("Most central node",
"Max in degree",
"(Theoretical) max in degree",
"Least central nodes",
"Min in degree",
"(Theoretical) min in degree",
"Average in degree",
"Median in degree"))
results$Value = c(people[which.max(people$`In degree`),]$Name,
max(people$`In degree`),
nodes,
paste0(c(people[which(people$`In degree` == min(people$`In degree`)),]$Name), collapse=", "),
min(people$`In degree`),
0,
avg_indegree,
median_indegree)
formattable(results,
align = c("l","l"))
# In-degree distribution among nodes
ggplot(people)+
geom_histogram(aes(x=indegree), stat="count", fill="#B78FB3")+
labs(title = "Distribution of in degree")+
xlab("In degree centrality")+ylab("Number of students")+
theme_minimal()
# Setting colours, shapes, sizes, ethnicity, gender, title
V(i_net)$color = colours_1[attr$Ethnicity]
V(i_net)$shape = c("dot","square")[attr$Gender+1]
V(i_net)$size = ifelse(people$`Above Average (In degree)`== "Yes",30,10)
V(i_net)$ethnicity = ifelse(attr$Ethnicity==3, "Italian",
ifelse(attr$Ethnicity == 1,"1st immigrant", "2nd immigrant"))
V(i_net)$gender = ifelse(attr$Gender == 0, "Female","Male")
V(i_net)$title = paste0("<p><b>", attr$ID,"</b><br>",
V(i_net)$gender,", ",attr$Grade,", ",
V(i_net)$ethnicity,"<br>In degree: ",
attr$indegree,"</p>")
# Creation of the visNetwork object
new_net = toVisNetworkData(i_net)
# Actual visualization
visNetwork(nodes = new_net$nodes,
edges = new_net$edges,
height = "800px", width = "100%",
font.size = 9,
physics = T) %>%
visEdges(arrows = "to") %>%
visOptions(highlightNearest = TRUE) %>%
visIgraphLayout(layout = "layout.fruchterman.reingold") %>%
visInteraction(dragNodes = FALSE,
dragView = FALSE,
zoomView = FALSE)
# Normalized outdegree
people$`Normalized Out degree` = round(people$`Out degree`/nodes, 3)
# Average and median out degree
avg_outdegree = mean(people$`Out degree`)
median_outdegree = median(sort(people$`Out degree`))
people$`Above Average (Out degree)` =  ifelse(outdegree<=avg_outdegree, "No", "Yes")
people %>%
select(Name, `Out degree`,`In degree`,
Degree, `Normalized Out degree`, `Above Average (Out degree)`) %>%
arrange(desc(outdegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",
font.weight = "bold")),
'In degree' = color_tile("transparent", tile_colors[1]),
'Out degree' = color_tile("transparent",  tile_colors[2]),
'Degree' = color_tile("transparent",  tile_colors[1]),
'Normalized Out degree' = color_tile("transparent",  tile_colors[2]),
'Above Average  (Out degree)' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes",  tile_colors[2],  tile_colors[1])))))
results = data.frame(Measures = c("Most central node",
"Max out degree",
"(Theoretical) max out degree",
"Least central nodes",
"Min out degree",
"(Theoretical) min out degree",
"Average out degree",
"Median out degree"))
results$Value = c(paste0(c(people[which(people$`Out degree` == max(people$`Out degree`)),]$Name), collapse=", "),
max(people$`Out degree`),
nodes,
paste0(c(people[which(people$`Out degree` == min(people$`Out degree`)),]$Name), collapse=", "),
min(people$`Out degree`),
0,
avg_outdegree,
median_outdegree)
formattable(results,
align = c("l","l"))
ggplot(people)+
geom_bar(aes(x=reorder(`Name`,`Out degree`),y=`Out degree`),
stat='identity',
fill="#B78FB3")+
geom_hline(yintercept=3.04, linetype="dashed", color = "#1FAD9D", size=1.5)+
theme_minimal()+
theme(axis.text.x = element_text(angle =45, hjust=1))+
xlab("Students")+
annotate(geom="text", x=4, y=3.5, label="Avg out-degree = 3.04",color="#1FAD9D")+
labs(title = "Distribution of Out degree Values")
# Setting colours, shapes, sizes, ethnicity, gender, title
V(i_net)$color = colours_1[attr$Ethnicity]
V(i_net)$shape = c("dot","square")[attr$Gender+1]
V(i_net)$size = ifelse(people$`Above Average  (Out degree)`== "Yes",30,10)
sna::degree(net)
sna::density(net)
density(net)
network.density(net)
knitr::opts_chunk$set(dpi=400,fig.width=7)
library(tidyverse)
library(sna)
library(knitr)
library(itsadug) # For gradient legend
library(formattable) # For nice tables
library(igraph)
library(visNetwork)
# Importing data
net = as.matrix(read.csv("bullying_network.csv",
stringsAsFactors=FALSE, row.names=1))
# Converting the adjacency matrix to a network
net = as.network(net, directed=T)
# Inspect the network
summary(net, print.adj = FALSE)
# Reading the csv file with node attributes with given types for summary
attr = read.csv("bullying_attributes.csv",
colClasses = c("character","factor","numeric","factor"))
summary(attr)
# Re-importing as numerical for the following plots and measures
attr = read.csv("bullying_attributes.csv")
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
mode="fruchtermanreingold", # set mode as Fruchterman-Reingold
jitter=F,           # do not allow nodes to be "jittered"
edge.col="grey70",  # set color of ties
vertex.col="cornflowerblue",   # set color of nodes
vertex.sides = 100,
displaylabels=T,    # indicate that labels should be included
label.pos=1,        # indicate that labels should be given below points
label.cex=.7,       # indicate the size of the labels (1 is default)
arrowhead.cex = 0.4)
colours_1 = c("#2a9d8f", "#e9c46a", "#e76f51")
sizes = seq(0.1, 4, length.out=11)
par(mar=c(0,0,0,0))
gplot(net,
gmode="digraph",    # directed network
jitter=T,
edge.col="grey70",  # set color of ties
vertex.col=colours_1[attr$Ethnicity], # set color of nodes depending on ethnicity
vertex.cex = sizes[attr$Grade], # set size of nodes depending on grade
vertex.sides= (attr$Gender-1)*47+4, # set shape of nodes depending on gender
vertex.rot = 45, # Nodes rotation
arrowhead.cex = 0.5) # Size of the arrows head
sizes = seq(0.2, 3, length.out=11)
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
jitter=T,
edge.col="grey70",  # set color of ties
vertex.col=colours_1[attr$Ethnicity],   # set color of nodes depending on ethnicity
vertex.cex = sizes[attr$Grade], # set size of nodes depending on grade
vertex.sides= (attr$Gender-1)*47+4, # set shape of nodes depending on gender
vertex.rot = 45,
arrowhead.cex = 0.5,
displaylabels=T,    # indicate that labels should be included
label.pos=1,        # indicate that labels should be given below points
label.cex=.7)       # indicate the size of the labels (1 is default)
legend("topleft",
legend = c("Ethnicity"," 1st gen immigrants", " 2st gen immigrants", " Italian",
" ", "Gender", " Male", " Female",
" ", "Grade", 0:10),
col = c("white",colours_1[1],colours_1[2],colours_1[3],
"white","white","black","black",
"white", "white", rep("black",11)),
bty = "n",
pch =c(15,15,15,15,
15,15,19,15,
15,15,rep(19,11)),
pt.cex = c(0,2.1,2.1, 2.1,
0,0,2.1,2.1,
0, 0, (0:10)/5),
cex = 1,
text.col = "grey10",
horiz = F ,
inset = c(0.01))
colours_2 = c('#fff0f3', '#ffccd5', '#ffb3c1', '#ff8fa3', '#ff758f', # Reds
'#ff4d6d', '#c9184a', '#a4133c', '#800f2f', '#590d22', # Reds
"#d8f3dc","#b7e4c7","#95d5b2","#74c69d","#52b788",     # Greens
"#40916c", "#2d6a4f","#245741","#1b4332","#081c15"     # Greens
)
shapes = c(3,4,50)
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
jitter=F,           # do not allow nodes to be "jittered"
edge.col="grey70",  # set color of ties
vertex.col=colours_2[attr$Gender*10+attr$Grade+1],   # set color of nodes
vertex.cex = 1.3,
vertex.rot = 45,
vertex.sides= shapes[attr$Ethnicity],
arrowhead.cex = 0.5)
par(mar=c(0,0,0,0)) # Margin deletion
gplot(net,
gmode="digraph",    # directed network
jitter=T,           # do not allow nodes to be "jittered"
edge.col="grey70",  # set color of ties
vertex.col=colours_2[attr$Gender*10+attr$Grade+1],   # set color of nodes
vertex.cex = 1,
vertex.rot = 45,
vertex.sides= shapes[attr$Ethnicity],
displaylabels=T,    # indicate that labels should be included
arrowhead.cex = 0.5,
label.pos=1,        # indicate that labels should be given below points
label.cex=.7)       # indicate the size of the labels (1 is default))
# Legend for gender and ethnicity
legend("topleft",
legend = c("Ethnicity"," 1st gen immigrants", " 2st gen immigrants", " Italian",
" ", "Gender", " Male", " Female",
" ", "Grade"),
col = c("white","black","black", "black",
"white","white","#52b788","#ff4d6d",
"white", "white"),
bty = "n",
pch =c(15,17,15,19,
15,15,15,15,
15, 15),
pt.cex = c(0,2.1,2.1, 2.2,
0,0,2.1,2.1,
0,0),
cex = 1,
text.col = "grey10",
horiz = F ,
inset = c(0.01))
# Gradient legend
pal = colorRampPalette(colours_2[1:10])
gradientLegend(valRange=c(0,10),
color = pal(10),
pos=c(0.05,0.1,.08,0.5),
side=4,
n.seg=1,
border.col = "grey10",
inside = T)
pal = colorRampPalette(colours_2[11:20])
gradientLegend(valRange=c(0,10),
color = pal(10),
pos=c(0.12,0.1,.15,0.5), side=4,
n.seg=1,
border.col = "grey10",
inside = T)
# Creation of the igraph network
i_net<-graph_from_adjacency_matrix(as.matrix(read.csv("bullying_network.csv",
row.names = 1,
stringsAsFactors = F)),
mode="directed", diag=F)
# Setting colours, shapes, sizes, ethnicity, gender, title
V(i_net)$color = colours_1[attr$Ethnicity]
V(i_net)$shape = c("dot","square")[attr$Gender+1]
V(i_net)$size = attr$Grade*3
V(i_net)$ethnicity = ifelse(attr$Ethnicity==3, "Italian",
ifelse(attr$Ethnicity == 1,"1st immigrant", "2nd immigrant"))
V(i_net)$gender = ifelse(attr$Gender == 0, "Female","Male")
V(i_net)$title = paste0("<p><b>", attr$ID,"</b><br>",
V(i_net)$gender,", ",attr$Grade,", ",
V(i_net)$ethnicity,"</p>")
# Dataframe for the legend
lnodes <- data.frame(label = c("1st immigrants","2nd immigrants","Italians","Females", "Males"),
shape = c(rep("triangle",3),"dot","square"),
color = c(colours_1,"#B78FB5","#B78FB5"),
font.size = 10,
title = "Informations")
# Creation of the visNetwork object
new_net = toVisNetworkData(i_net)
# Actual visualization
visNetwork(nodes = new_net$nodes,
edges = new_net$edges,
height = "800px", width = "100%",
font.size = 9,
physics = T) %>%
visEdges(arrows = "to") %>%
visOptions(highlightNearest = TRUE,
selectedBy = "ethnicity") %>%
visIgraphLayout(layout = "layout.fruchterman.reingold") %>%
visLegend(addNodes = lnodes, useGroups = FALSE, ncol = 1)
# How many people are you bullied from?
indegree = sna::degree(net, gmode="digraph", cmode = "indegree")
# How many people do you bully?
outdegree = sna::degree(net, gmode="digraph", cmode = "outdegree")
# Overall Degree
degree = sna::degree(net, gmode="digraph")
attr$indegree = indegree
attr$outdegree = outdegree
tile_colors = c("#B78FB5", # lilac
"#25D0BC", # green
"#71A2C1")
# Create dataframe with names, in and out-degree
names = net %v% "vertex.names"    # Get vertex names
people = data.frame(Name = names) # Create data frame with names column
people$`In degree` = indegree        # Insert in degree
people$`Out degree` = outdegree      # Insert out degree
people$Degree = degree            # Insert total degree
# Normalized indegree
nodes = length(net$val) - 1
people$`Normalized In degree` = round(people$`In degree`/nodes,2)
# Average and median in degree
avg_indegree = mean(people$`In degree`)
median_indegree = median(people$`In degree`)
people$`Above Average (In degree)` =  ifelse(indegree<=avg_indegree, "No", "Yes")
people %>%
arrange(desc(indegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",font.weight = "bold")),
'In degree' = color_tile("transparent", tile_colors[1]),
'Out degree' = color_tile("transparent",tile_colors[2]),
'Degree' = color_tile("transparent", tile_colors[2]),
'Normalized In degree' = color_tile("transparent", tile_colors[1]),
'Above Average' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes", tile_colors[1], tile_colors[2])))))
results = data.frame(Measures = c("Most central node",
"Max in degree",
"(Theoretical) max in degree",
"Least central nodes",
"Min in degree",
"(Theoretical) min in degree",
"Average in degree",
"Median in degree"))
results$Value = c(people[which.max(people$`In degree`),]$Name,
max(people$`In degree`),
nodes,
paste0(c(people[which(people$`In degree` == min(people$`In degree`)),]$Name), collapse=", "),
min(people$`In degree`),
0,
avg_indegree,
median_indegree)
formattable(results,
align = c("l","l"))
# In-degree distribution among nodes
ggplot(people)+
geom_histogram(aes(x=indegree), stat="count", fill="#B78FB3")+
labs(title = "Distribution of in degree")+
xlab("In degree centrality")+ylab("Number of students")+
theme_minimal()
# Setting colours, shapes, sizes, ethnicity, gender, title
V(i_net)$color = colours_1[attr$Ethnicity]
V(i_net)$shape = c("dot","square")[attr$Gender+1]
V(i_net)$size = ifelse(people$`Above Average (In degree)`== "Yes",30,10)
V(i_net)$ethnicity = ifelse(attr$Ethnicity==3, "Italian",
ifelse(attr$Ethnicity == 1,"1st immigrant", "2nd immigrant"))
V(i_net)$gender = ifelse(attr$Gender == 0, "Female","Male")
V(i_net)$title = paste0("<p><b>", attr$ID,"</b><br>",
V(i_net)$gender,", ",attr$Grade,", ",
V(i_net)$ethnicity,"<br>In degree: ",
attr$indegree,"</p>")
# Creation of the visNetwork object
new_net = toVisNetworkData(i_net)
# Actual visualization
visNetwork(nodes = new_net$nodes,
edges = new_net$edges,
height = "800px", width = "100%",
font.size = 9,
physics = T) %>%
visEdges(arrows = "to") %>%
visOptions(highlightNearest = TRUE) %>%
visIgraphLayout(layout = "layout.fruchterman.reingold") %>%
visInteraction(dragNodes = FALSE,
dragView = FALSE,
zoomView = FALSE)
# Normalized outdegree
people$`Normalized Out degree` = round(people$`Out degree`/nodes, 3)
# Average and median out degree
avg_outdegree = mean(people$`Out degree`)
median_outdegree = median(sort(people$`Out degree`))
people$`Above Average (Out degree)` =  ifelse(outdegree<=avg_outdegree, "No", "Yes")
people %>%
select(Name, `Out degree`,`In degree`,
Degree, `Normalized Out degree`, `Above Average (Out degree)`) %>%
arrange(desc(outdegree)) %>%
formattable(align = c("l",rep("c",5)),
list(
'Name' = formatter("span", style = ~ style(color = "grey",
font.weight = "bold")),
'In degree' = color_tile("transparent", tile_colors[1]),
'Out degree' = color_tile("transparent",  tile_colors[2]),
'Degree' = color_tile("transparent",  tile_colors[1]),
'Normalized Out degree' = color_tile("transparent",  tile_colors[2]),
'Above Average  (Out degree)' = formatter("span", x ~ icontext(ifelse(x == "Yes", "ok", "remove")),
style = x ~ style(color = ifelse(x == "Yes",  tile_colors[2],  tile_colors[1])))))
results = data.frame(Measures = c("Most central node",
"Max out degree",
"(Theoretical) max out degree",
"Least central nodes",
"Min out degree",
"(Theoretical) min out degree",
"Average out degree",
"Median out degree"))
results$Value = c(paste0(c(people[which(people$`Out degree` == max(people$`Out degree`)),]$Name), collapse=", "),
max(people$`Out degree`),
nodes,
paste0(c(people[which(people$`Out degree` == min(people$`Out degree`)),]$Name), collapse=", "),
min(people$`Out degree`),
0,
avg_outdegree,
median_outdegree)
formattable(results,
align = c("l","l"))
ggplot(people)+
geom_bar(aes(x=reorder(`Name`,`Out degree`),y=`Out degree`),
stat='identity',
fill="#B78FB3")+
geom_hline(yintercept=3.04, linetype="dashed", color = "#1FAD9D", size=1.5)+
theme_minimal()+
theme(axis.text.x = element_text(angle =45, hjust=1))+
xlab("Students")+
annotate(geom="text", x=4, y=3.5, label="Avg out-degree = 3.04",color="#1FAD9D")+
labs(title = "Distribution of Out degree Values")
# Setting colours, shapes, sizes, ethnicity, gender, title
V(i_net)$color = colours_1[attr$Ethnicity]
V(i_net)$shape = c("dot","square")[attr$Gender+1]
V(i_net)$size = ifelse(people$`Above Average  (Out degree)`== "Yes",30,10)
if (!require(tidyverse)) install.packages('tidyverse')
if (!require(sna)) install.packages('sna')
if (!require(knitr)) install.packages('knitr')
if (!require(itsadug)) install.packages('itsadug')
if (!require(formattable)) install.packages('formattable')
if (!require(igraph)) install.packages('igraph')
if (!require(visNetwork)) install.packages('visNetwork')
library(tidyverse)
library(sna)
library(knitr)
library(itsadug) # For gradient legend
library(formattable) # For nice tables
library(igraph)
library(visNetwork)
sna::dyad.census(net)
# Linear relationship between in degree and grade
ggplot(people,aes(x = indegree, y = grade))+
stat_smooth(method = "lm", color = "#1FAD9D", fill = "#A8F0E9")+
geom_point(size = 2.5, color = "#1FAD9D")+
theme_minimal()+
theme(axis.text.x = element_text(angle =45, hjust=1))+
labs(title = "Linear relationship between in degree and grade")
res.aov <- aov(indegree ~ as.factor(Grade), data = attr)
summary(res.aov)
TukeyHSD(res.aov)
res.aov <- aov(outdegree ~ as.factor(Grade), data = attr)
summary(res.aov)
TukeyHSD(res.aov)
res.aov <- aov(indegree ~ as.factor(Grade), data = attr)
summary(res.aov)
TukeyHSD(res.aov)
